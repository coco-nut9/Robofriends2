{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","OnSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAaeA,EAXF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,sBAAKC,UAAU,sDAAf,UACQ,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,eACzB,gCACG,6BAAKF,IACL,4BAAIC,WCgBJK,EArBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAIf,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACA,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCCVC,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,8BACA,uBACIV,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAYH,OCCTI,G,MATA,SAACC,GACZ,OACI,qBAAKC,MAAQ,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAAtE,SACKJ,EAAMK,aCsBJC,E,kDAtBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAQvB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAS,M,oBAI7B,WACI,OAAIG,KAAKJ,MAAMC,SACL,0DAEHG,KAAKX,MAAMK,a,GAlBMQ,aCuDbC,E,kDA3CX,aAAe,IAAD,8BACV,gBAkBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAlBzC,EAAKX,MAAQ,CACTlB,OAAQ,GACRK,YAAa,IAElByB,QAAQC,IAAI,KAND,E,qDASlB,WAAqB,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKb,SAAS,CAAEvB,OAAQoC,S,oBAShC,WAAU,IAAD,OACCC,EAAiBf,KAAKJ,MAAMlB,OAAOsC,QAAO,SAAAtC,GAC5C,OAAOA,EAAOP,KAAK8C,cAAcC,SAAS,EAAKtB,MAAMb,YAAYkC,kBAGzE,OADIT,QAAQC,IAAI,KAEZ,sBAAKnC,UAAY,KAAjB,UACI,oBAAIA,UAAW,KAAf,0BACA,cAAC,EAAD,CAAWU,aAAgBgB,KAAKI,iBAChC,cAAC,EAAD,UACI,cAAC,EAAD,UACA,cAAC,EAAD,CAAU1B,OAAQqC,e,GApChBb,aCFHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9c146aed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 grow ma2 bw2 shadow-5'>\r\n                <img alt='robots' src={`https://robohash.org/${id}?200x200/`}/>\r\n            <div>\r\n               <h2>{name}</h2> \r\n               <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n    }\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n    if (!true) {\r\n        throw new Error('noooo');\r\n    }\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user, i) =>{\r\n                    return (\r\n                    <Card \r\n                    key={i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                    />\r\n                 );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return(\r\n        <div>\r\n        <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots' \r\n            onChange = {searchChange}\r\n            />\r\n        </div>   \r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style ={{ overflowY: 'scroll', border: '5px solid black', height:'5000px'}}>\r\n            {props.children}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","\r\nimport React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\ncomponentDidCatch(error, info) {\r\n    this.setState({ hasError:true})\r\n}\r\n\r\n\r\nrender() {\r\n    if (this.state.hasError) {\r\n        return<h1>oooops. That is not good</h1>\r\n    }\r\n    return this.props.children\r\n}\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport CardList from '../Components/CardList'\r\nimport SearchBox from '../Components/SearchBox'\r\nimport {robots} from '../robots'\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll'\r\nimport ErrorBoundary from '../Components/ErrorBoundary'\r\nconst state = {\r\n    robots: robots,\r\n    searchfield: ''\r\n}\r\n\r\n\r\n\r\nclass App extends Component{\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n       console.log('1');\r\n    }\r\n\r\ncomponentDidMount() {\r\n    fetch(`https://jsonplaceholder.typicode.com/users`)\r\n        .then(response=> {\r\n            return response.json();\r\n        })\r\n        .then(users => {\r\n            this.setState({ robots: users}) \r\n        });\r\n}\r\n\r\n    OnSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n       \r\n    }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        console.log('3');\r\n    return (\r\n        <div className = 'tc'>\r\n            <h1 className= 'f1' > RoboFriends</h1>\r\n            <SearchBox searchChange = {this.OnSearchChange} />\r\n            <Scroll>\r\n                <ErrorBoundary>\r\n                <CardList robots={filteredRobots}/>\r\n                </ErrorBoundary>\r\n            </Scroll>\r\n        </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport {robots} from './robots'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}